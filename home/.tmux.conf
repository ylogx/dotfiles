# C-b is not acceptable -- Vim uses it. Set Alt-b as the prefix
#unbind C-b
#set -g prefix C-\     # or `
#bind-key C-\ send-prefix  # Without this forget backtick forever (in tmux)

# Reload
unbind r
bind r source-file ~/.tmux.conf

###########################################################################
# Turn on mouse mode - enables scrolling etc. Mouse mode is on by default.
# <prefix> M -- to turn it off
# <prefix> m -- to turn it on
#
# As of tmux 2.1, a backward-incompatible change was introduced.
# mode-mouse and mouse-* no longer exist, replaced by simply
# mouse <on|off>. Which is great, and easier, but unfortunately I use
# tmux on systems which I don't foresee going to 2.1+ anytime soon.
# So, time to test versions... this is kind of cheap and hacky, and it
# won't work for 2.2 and beyond, but will work for now. I tried to make
# this more generalized but have not been successful so far.
#

run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | \
                            sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'


if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1 ]' \
    'set -g mouse on; bind m set -g mouse on \; display "Mouse ON"; bind M set -g mouse off \; display "Mouse OFF"'
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.1" | bc)" = 1 ]' \
    'set -g mode-mouse on; set -g mouse-resize-pane on; set -g mouse-select-pane on; set -g mouse-select-window on; bind m set -g mode-mouse on \; set -g mouse-resize-pane on \; set -g mouse-select-pane on \; set -g mouse-select-window on \; display "Mouse ON"; bind M set -g mode-mouse off \; set -g mouse-resize-pane off \; set -g mouse-select-pane off \; set -g mouse-select-window off \; display "Mouse OFF"'


set-option -g allow-rename off  # Keep tab names fixed
set -g history-limit 8192
# Start numbering at 1
set -g base-index 1

bind -n C-k clear-history
bind-key k clear-history

# Allows for faster key repetition
set -s escape-time 0

# Set status bar
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" = 1 ]' \
    'set -g status-style bg=black,fg=white'
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' \
    'set -g status-bg black \; set -g status-fg white'
set -g status-left ""
set -g status-right "#[fg=green]#H"

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
#setw -g aggressive-resize on
setw -g aggressive-resize off

# Allows us to use C-a a <command> to send commands to a TMUX session inside
# another TMUX session
#bind-key a send-prefix

# Activity monitoring
#setw -g monitor-activity on
#set -g visual-activity on

# Example of using a shell command in the status line
#set -g status-right "#[fg=yellow]#(uptime | cut -d ',' -f 2-)"

# Highlight active window
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" = 1 ]' \
    'set-window-option -g window-status-current-style bg=red'
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' \
    'set-window-option -g window-status-current-bg red'

# Smart pane switching with awareness of vim splits
#is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
#bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
#bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
#bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
#bind -n C-L if-shell "$is_vim" "send-keys C-l" "select-pane -R" #C-l conflicts with clear command
#bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Send Ctrl-l to clear screen
bind -n C-l send-keys 'C-l'
#bind -n M-Right next-window
#bind -n M-Left previous-window
#bind -n C-Right next-window
#bind -n C-Left previous-window

#set -g status-right "CPU: #{cpu_percentage} | Battery: #{battery_icon} #{battery_percentage} #{battery_remain} | #{online_status} | %a %h-%d %H:%M "
set -g status-right "Battery: #{battery_icon} #{battery_percentage} #{battery_remain} | %a %h-%d %H:%M "

setw -g mode-keys vi
set -g @shell_mode 'vi'

#set-option -g default-command "reattach-to-user-namespace -l zsh" # or bash...
#bind C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
#bind C-v run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"

setw -g mode-keys vi
# Send Ctrl-l to clear screen
bind -n C-l send-keys 'C-l'

# Move tabs left right
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1


# List of plugins  # Install, Update: Prefix-I, Prefix-U
set -g @plugin 'tmux-plugins/tpm'
#set -g @plugin 'tmux-plugins/tmux-sensible'

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'christoomey/vim-tmux-navigator'

# Automatic Restore: Last saved environment is automatically restored when tmux is started.
set -g @continuum-restore 'on'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
